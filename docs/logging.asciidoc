[[logs]]
== Logs

Elastic Python APM Agent provides the following log features:

- <<log-correlation-ids>> : Automatically inject correlation IDs that allow navigation between logs, traces and services.
- <<log-reformatting>> : Automatically reformat plaintext logs in {ecs-logging-ref}/intro.html[ECS logging] format.

NOTE: Elastic Python APM Agent does not send the logs to Elasticsearch. It only
injects correlation IDs and reformats the logs. You must use another ingestion
strategy.  We recommend https://www.elastic.co/beats/filebeat[Filebeat] for that purpose.

Those features are part of {observability-guide}/application-logs.html[Application log ingestion strategies].

The {ecs-logging-python-ref}/intro.html[`ecs-logging-python`] library can also be used to use the {ecs-logging-ref}/intro.html[ECS logging] format without an APM agent.
When deployed with the Python APM agent, the agent will provide <<log-correlation-ids,log correlation>> IDs.

[float]
[[log-correlation-ids]]
=== Log correlation

{apm-guide-ref}/log-correlation.html[Log correlation] allows you to navigate to all logs belonging to a particular trace
and vice-versa: for a specific log, see in which context it has been logged and which parameters the user provided.

The Agent provides integrations with both the default Python logging library,
as well as http://www.structlog.org/en/stable/[`structlog`].

* <<logging-integrations>>
* <<log-correlation-in-es>>

[float]
[[logging-integrations]]
==== Logging integrations

[float]
[[logging]]
===== `logging`

We use https://docs.python.org/3/library/logging.html#logging.setLogRecordFactory[`logging.setLogRecordFactory()`]
to decorate the default LogRecordFactory to automatically add new attributes to
each LogRecord object:

* `elasticapm_transaction_id`
* `elasticapm_trace_id`
* `elasticapm_span_id`

This factory also adds these fields to a dictionary attribute,
`elasticapm_labels`, using the official ECS https://www.elastic.co/guide/en/ecs/current/ecs-tracing.html[tracing fields].

You can disable this automatic behavior by using the
<<config-generic-disable-log-record-factory,`disable_log_record_factory`>> setting
in your configuration.

[float]
[[structlog]]
===== `structlog`

We provide a http://www.structlog.org/en/stable/processors.html[processor] for
http://www.structlog.org/en/stable/[`structlog`] which will add three new keys
to the event_dict of any processed event:

* `transaction.id`
* `trace.id`
* `span.id`

[source,python]
----
from structlog import PrintLogger, wrap_logger
from structlog.processors import JSONRenderer
from elasticapm.handlers.structlog import structlog_processor

wrapped_logger = PrintLogger()
logger = wrap_logger(wrapped_logger, processors=[structlog_processor, JSONRenderer()])
log = logger.new()
log.msg("some_event")
----

[float]
===== Use structlog for agent-internal logging

The Elastic APM Python agent uses logging to log internal events and issues.
By default, it will use a `logging` logger.
If your project uses structlog, you can tell the agent to use a structlog logger
by setting the environment variable `ELASTIC_APM_USE_STRUCTLOG` to `true`.

[float]
[[log-correlation-in-es]]
=== Log correlation in Elasticsearch

In order to correlate logs from your app with transactions captured by the
Elastic APM Python Agent, your logs must contain one or more of the following
identifiers:

* `transaction.id`
* `trace.id`
* `span.id`

If you're using structured logging, either https://docs.python.org/3/howto/logging-cookbook.html#implementing-structured-logging[with a custom solution]
or with http://www.structlog.org/en/stable/[structlog] (recommended), then this
is fairly easy. Throw the http://www.structlog.org/en/stable/api.html#structlog.processors.JSONRenderer[JSONRenderer]
in, and use {blog-ref}structured-logging-filebeat[Filebeat]
to pull these logs into Elasticsearch.

Without structured logging the task gets a little trickier. Here we
recommend first making sure your LogRecord objects have the elasticapm
attributes (see <<logging>>), and then you'll want to combine some specific
formatting with a Grok pattern, either in Elasticsearch using
{ref}/grok-processor.html[the grok processor],
or in {logstash-ref}/plugins-filters-grok.html[logstash with a plugin].

Say you have a https://docs.python.org/3/library/logging.html#logging.Formatter[Formatter]
that looks like this:

[source,python]
----
import logging

fh = logging.FileHandler('spam.log')
formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")
fh.setFormatter(formatter)
----

You can add the APM identifiers by simply switching out the `Formatter` object
for the one that we provide:

[source,python]
----
import logging
from elasticapm.handlers.logging import Formatter

fh = logging.FileHandler('spam.log')
formatter = Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")
fh.setFormatter(formatter)
----

This will automatically append apm-specific fields to your format string:

[source,python]
----
formatstring = "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
formatstring = formatstring + " | elasticapm " \
                              "transaction.id=%(elasticapm_transaction_id)s " \
                              "trace.id=%(elasticapm_trace_id)s " \
                              "span.id=%(elasticapm_span_id)s"
----

Then, you could use a grok pattern like this (for the
{ref}/grok-processor.html[Elasticsearch Grok Processor]):

[source, json]
----
{
  "description" : "...",
  "processors": [
    {
      "grok": {
        "field": "message",
        "patterns": ["%{GREEDYDATA:msg} | elasticapm transaction.id=%{DATA:transaction.id} trace.id=%{DATA:trace.id} span.id=%{DATA:span.id}"]
      }
    }
  ]
}
----

[float]
[[log-reformatting]]
=== Log reformatting (experimental)

Starting in version 6.16.0, the agent can automatically reformat application
logs to ECS format with no changes to dependencies. Prior versions must install
the `ecs_logging` dependency.

Log reformatting is controlled by the <<config-log_ecs_reformatting, `log_ecs_reformatting`>> configuration option, and is disabled by default.

The reformatted logs will include both the <<log-correlation-ids, trace and service correlation>> IDs.
