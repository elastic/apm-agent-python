[[logging-integrations]]
=== Logging Integrations

`elasticapm` provides integrations with both the default python logging library,
as well as http://www.structlog.org/en/stable/[`structlog`].

[[logging]]
==== `logging`

For Python 3.2+, we use https://docs.python.org/3/library/logging.html#logging.setLogRecordFactory[`logging.setLogRecordFactory()`]
to decorate the default LogRecordFactory to automatically add new attributes to
each LogRecord object:

* `elasticapm_transaction_id`
* `elasticapm_trace_id`
* `elasticapm_span_id`

This factory also adds these fields to a dictionary attribute,
`elasticapm_labels`, using the official tracing fields names as documented
here: https://www.elastic.co/guide/en/ecs/current/ecs-tracing.html

You can disable this automatic behavior by setting `DISABLE_LOG_RECORD_FACTORY=True`
in the config.

For Python versions <3.2, we also provide a
https://docs.python.org/3/library/logging.html#filter-objects[filter]which will
add the same new attributes to any filtered `LogRecord`:

Note that because https://docs.python.org/3/library/logging.html#filter-objects[filters
are not propagated to descendent loggers], you should add the filter to each of
your log handlers, as handlers are propagated, along with their attached filters.

[source,python]
----
import logging
from elasticapm.handlers.logging import LoggingFilter

console = logging.StreamHandler()
console.addFilter(LoggingFilter())
# add the handler to the root logger
logging.getLogger("").addHandler(console)
----


[[structlog]]
==== `structlog`

We provide a http://www.structlog.org/en/stable/processors.html[processor] for
http://www.structlog.org/en/stable/[`structlog`] which will add three new keys
to the event_dict of any processed event:

* `"transaction.id"`
* `"trace.id"`
* `"span.id"`

[source,python]
----
from structlog import PrintLogger, wrap_logger
from elasticapm.handlers.structlog import structlog_processor

wrapped_logger = PrintLogger()
logger = wrap_logger(wrapped_logger, processors=[structlog_processor])
log = logger.new()
log.msg("some_event")
----

