[[starlette-support]]
=== Starlette/FastAPI Support

Incorporating Elastic APM into your Starlette project only requires a few easy
steps.

[float]
[[starlette-installation]]
==== Installation

Install the Elastic APM agent using pip:

[source,bash]
----
$ pip install elastic-apm
----

or add `elastic-apm` to your project's `requirements.txt` file.


[float]
[[starlette-setup]]
==== Setup

To set up the agent, you need to initialize it with appropriate settings.

The settings are configured either via environment variables, or as
initialization arguments.

You can find a list of all available settings in the
<<configuration, Configuration>> page.

To initialize the agent for your application using environment variables:

[source,python]
----
from starlette.applications import Starlette
from elasticapm.contrib.starlette import make_apm_client, ElasticAPM

apm = make_apm_client()
app = Starlette()
app.add_middleware(ElasticAPM, client=apm)
----

To configure the agent using initialization arguments:

[source,python]
----
from starlette.applications import Starlette
from elasticapm.contrib.starlette import make_apm_client, ElasticAPM

apm = make_apm_client({
    'SERVICE_NAME': '<SERVICE-NAME>',
    'SECRET_TOKEN': '<SECRET-TOKEN>',
})
app = Starlette()
app.add_middleware(ElasticAPM, client=apm)
----

[float]
[[starlette-fastapi]]
==== FastAPI

Because FastAPI supports Starlette middleware, using the agent with FastAPI
is almost exactly the same as with Starlette:

[source,python]
----
from fastapi import FastAPI
from elasticapm.contrib.starlette import make_apm_client, ElasticAPM

apm = make_apm_client()
app = FastAPI()
app.add_middleware(ElasticAPM, client=apm)
----

[float]
[[starlette-usage]]
==== Usage

Once you have configured the agent, it will automatically track transactions
and capture uncaught exceptions within starlette.

Capture an arbitrary exception by calling
<<client-api-capture-exception,`capture_exception`>>:

[source,python]
----
try:
    1 / 0
except ZeroDivisionError:
    apm.client.capture_exception()
----

Log a generic message with <<client-api-capture-message,`capture_message`>>:

[source,python]
----
apm.client.capture_message('hello, world!')
----

[float]
[[starlette-performance-metrics]]
==== Performance metrics

If you've followed the instructions above, the agent has installed our
instrumentation middleware which will process all requests through your app.
This will measure response times, as well as detailed performance data for
all supported technologies.

NOTE: Due to the fact that `asyncio` drivers are usually separate from their
synchronous counterparts, specific instrumentation is needed for all drivers.
The support for asynchronous drivers is currently quite limited.

[float]
[[starlette-ignoring-specific-views]]
===== Ignoring specific routes

You can use the
<<config-transactions-ignore-patterns,`TRANSACTIONS_IGNORE_PATTERNS`>>
configuration option to ignore specific routes. The list given should be a
list of regular expressions which are matched against the transaction name:

[source,python]
----
apm = make_apm_client({
    # ...
    'TRANSACTIONS_IGNORE_PATTERNS': ['^GET /secret', '/extra_secret']
    # ...
})
----

This would ignore any requests using the `GET /secret` route
and any requests containing `/extra_secret`.


[float]
[[supported-starlette-and-python-versions]]
==== Supported Starlette and Python versions

A list of supported <<supported-starlette,Starlette>> and
<<supported-python,Python>> versions can be found on our
<<supported-technologies,Supported Technologies>> page.

NOTE: Elastic APM only supports `asyncio` when using Python 3.7+
