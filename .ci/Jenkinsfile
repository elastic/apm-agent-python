#!/usr/bin/env groovy
@Library('apm@current') _

import co.elastic.matrix.*

pipeline {
  agent any
  environment {
    BASE_DIR="src/github.com/elastic/apm-agent-python"
    PIPELINE_LOG_LEVEL='INFO'
    NOTIFY_TO = credentials('notify-to')
    JOB_GCS_BUCKET = credentials('gcs-bucket')
    CODECOV_SECRET = 'secret/apm-team/ci/apm-agent-python-codecov'
  }
  options {
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
    rateLimitBuilds(throttle: [count: 60, durationName: 'hour', userBoost: true])
    quietPeriod(10)
  }
  triggers {
    issueCommentTrigger('(?i).*(?:jenkins\\W+)?run\\W+(?:the\\W+)?tests(?:\\W+please)?.*')
  }
  stages {
    stage('Initializing'){
      agent { label 'docker && linux && immutable' }
      options { skipDefaultCheckout() }
      environment {
        HOME = "${env.WORKSPACE}"
        PATH = "${env.PATH}:${env.WORKSPACE}/bin"
        ELASTIC_DOCS = "${env.WORKSPACE}/elastic/docs"
      }
      stages {
        /**
        Checkout the code and stash it, to use it on other stages.
        */
        stage('Checkout') {
          steps {
            deleteDir()
            gitCheckout(basedir: "${BASE_DIR}")
            stash allowEmpty: true, name: 'source', useDefaultExcludes: false
          }
        }
        /**
        Build the project from code..
        */
        stage('Lint') {
          steps {
            withGithubNotify(context: 'Lint') {
              deleteDir()
              unstash 'source'
              dir("${BASE_DIR}"){
                sh script: """
                ./tests/scripts/docker/cleanup.sh
                ./tests/scripts/docker/isort.sh
                """, label: "isort import sorting"
                sh script: """
                ./tests/scripts/docker/cleanup.sh
                ./tests/scripts/docker/black.sh
                """, label: "Black code formatting"
                sh script: './tests/scripts/license_headers_check.sh', label: "Copyright notice"
              }
            }
          }
        }
      }
    }
    /**
    Execute unit tests.
    */
    stage('Test') {
      agent { label 'linux && immutable' }
      options {
        timeout(time: 1, unit: 'HOURS')
        skipDefaultCheckout()
      }
      steps {
        withGithubNotify(context: 'Test', tab: 'tests') {
        deleteDir()
        unstash "source"
        dir("${BASE_DIR}"){
          script {
            def node = readYaml(file: '.ci/.jenkins_python.yml')
            def parallelTasks = [:]
            node['PYTHON_VERSION'].each{ version ->
              parallelTasks["${version}"] = generateStep(version)
            }
            parallel(parallelTasks)
            }
          }
        }
      }
    }
    /**
    Build the documentation.
    */
    stage('Documentation') {
      agent { label 'docker && linux && immutable' }
      options { skipDefaultCheckout() }
      environment {
        HOME = "${env.WORKSPACE}"
        PATH = "${env.PATH}:${env.WORKSPACE}/bin"
        ELASTIC_DOCS = "${env.WORKSPACE}/elastic/docs"
      }
      when {
        beforeAgent true
        allOf {
          anyOf {
            branch 'master'
            branch "\\d+\\.\\d+"
            branch "v\\d?"
            tag "v\\d+\\.\\d+\\.\\d+*"
            expression { return params.Run_As_Master_Branch }
          }
          expression { return params.doc_ci }
        }
      }
      steps {
        deleteDir()
        unstash 'source'
        dir("${BASE_DIR}"){
          buildDocs(docsDir: "docs", archive: true)
        }
      }
    }
    stage('Building packages') {
      agent { label 'docker && linux && immutable' }
      options {
        timeout(time: 1, unit: 'HOURS')
        skipDefaultCheckout()
      }
      environment {
        HOME = "${env.WORKSPACE}"
        PATH = "${env.PATH}:${env.WORKSPACE}/.local/bin"
      }
      steps {
        withGithubNotify(context: 'Building packages') {
          deleteDir()
          unstash 'source'
          dir("${BASE_DIR}"){
            sh script: 'pip3 install --user cibuildwheel', label: "Installing cibuildwheel"
            sh script: 'mkdir wheelhouse', label: "creating wheelhouse"
            sh script: 'cibuildwheel --platform linux --output-dir wheelhouse; ls -l wheelhouse'
          }
          stash allowEmpty: true, name: 'packages', includes: "${BASE_DIR}/wheelhouse/*.whl,${BASE_DIR}/dist/*.tar.gz", useDefaultExcludes: false
        }
      }
    }
    stage('Release') {
      agent { label 'linux && immutable' }
      options {
        skipDefaultCheckout()
        timeout(time: 12, unit: 'HOURS')
      }
      environment {
        HOME = "${env.WORKSPACE}"
        PATH = "${env.PATH}:${env.WORKSPACE}/.local/bin"
      }
      input {
        message 'Should we release a new version?'
        ok 'Yes, we should.'
        parameters {
          choice(
            choices: [
              'https://upload.pypi.org/legacy/',
              'https://test.pypi.org/legacy/'
             ],
             description: 'PyPI repository URL',
             name: 'REPO_URL')
        }
      }
      when {
        beforeAgent true
        beforeInput true
        anyOf {
          tag "v\\d+\\.\\d+\\.\\d+*"
          expression { return params.Run_As_Master_Branch }
        }
      }
      steps {
        withGithubNotify(context: 'Release') {
          deleteDir()
          unstash 'source'
          unstash('packages')
          dir("${BASE_DIR}"){
            releasePackages()
          }
        }
      }
    }
  }
  post {
    cleanup {
      notifyBuildResult()
    }
  }
}

def generateStep(version){
  def branch = env.BRANCH_NAME
  if(env.CHANGE_ID){
    branch = env.CHANGE_TARGET
  }
  return {
    build(job: "apm-agent-python/apm-agent-python-downstream/${branch}",
      parameters: [
        string(name: 'PYTHON_VERSION', value: version),
        string(name: 'BRANCH_SPECIFIER', value: env.GIT_BASE_COMMIT),
        string(name: 'MERGE_TARGET', value: branch),
      ],
      propagate: true,
      quietPeriod: 10,
      wait: true
    )
  }
}

def releasePackages(){
  withSecretVault(secret: 'secret/apm-team/ci/apm-agent-python-twine',
                  user_var_name: 'TWINE_USER', pass_var_name: 'TWINE_PASSWORD'){
    sh(label: "Release packages", script: """
    set +x
    python -m pip install --user twine
    python setup.py sdist
    echo "Uploading to ${REPO_URL} with user \${TWINE_USER}"
    python -m twine upload --username "\${TWINE_USER}" --password "\${TWINE_PASSWORD}" --skip-existing --repository-url \${REPO_URL} dist/*.tar.gz
    python -m twine upload --username "\${TWINE_USER}" --password "\${TWINE_PASSWORD}" --skip-existing --repository-url \${REPO_URL} wheelhouse/*.whl
    """)
  }
}
